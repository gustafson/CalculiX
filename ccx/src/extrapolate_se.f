!
!     CalculiX - A 3-dimensional finite element program
!              Copyright (C) 1998-2023 Guido Dhondt
!
!     This program is free software; you can redistribute it and/or
!     modify it under the terms of the GNU General Public License as
!     published by the Free Software Foundation(version 2);
!     
!
!     This program is distributed in the hope that it will be useful,
!     but WITHOUT ANY WARRANTY; without even the implied warranty of 
!     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
!     GNU General Public License for more details.
!
!     You should have received a copy of the GNU General Public License
!     along with this program; if not, write to the Free Software
!     Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
!
      subroutine extrapolate_se(yi,yn,ipkon,inum,kon,lakon,nfield,nk,
     &  ne,mi,ndim,orab,ielorien,co,iorienloc,cflag,
     &  vold,iforce,ielmat,thicke,ielprop,prop,ialeneigh,
     &  neaneigh,nebneigh,ialnneigh,naneigh,nbneigh)
!
!     extrapolates field values at the integration points to the 
!     nodes
!
!     the C3D20RB element has 50 integration points, however, the
!     first 8 integration points coincide with those of a C3D20R
!     element. In this routine the C3D20RBR and C3D20RBC
!     elements are treated as an ordinary C3D20R element
!
!     the number of internal state variables is limited to 999
!     (cfr. array field)
!
      implicit none
!
      character*1 cflag
      character*8 lakon(*),lakonl
!
      integer ipkon(*),inum(*),kon(*),mi(*),ne,indexe,nope,
     &  nonei20(3,12),nfield,nonei10(3,6),nk,i,j,k,l,ndim,
     &  nonei15(3,9),iorienloc,iorien,ielorien(mi(3),*),konl,
     &  mint3d,m,iflag,jj,ll,ielmat(mi(3),*),ielprop(*),
     &  nlayer,nopeexp,ilayer,kk,mint2d,nopes,kl,ki,null,
     &  itet(4),iwedge(2,9),ialeneigh(*),neaneigh,nebneigh,ij,
     &  ialnneigh(*),naneigh,nbneigh,iforce
!
      real*8 yi(ndim,mi(1),*),yn(nfield,*),field(999,20*mi(3)),a8(8,8),
     &  a4(4,4),a27(20,27),a9(6,9),a2(6,2),orab(7,*),co(3,*),prop(*),
     &  coords(3,mi(1)),xi,et,ze,xl(3,20),xsj,shp(4,20),weight,
     &  yiloc(6,mi(1)),a(3,3),b(3,3),c(3,3),vold(0:mi(2),*),tlayer(4),
     &  dlayer(4),xlayer(mi(3),4),thickness,xs2(3,7),xl2(3,8),
     &  xsj2(3),shp2(7,8),thicke(mi(3),*),coloc(3,8),
     &  xwedge(2,2,9),a14(8,14),a6(6,6)
!
!
!
      include "gauss.f"
!
      data coloc /-1.d0,-1.d0,-1.d0,
     &             1.d0,-1.d0,-1.d0,
     &            -1.d0,1.d0,-1.d0,
     &             1.d0,1.d0,-1.d0,
     &            -1.d0,-1.d0,1.d0,
     &             1.d0,-1.d0,1.d0,
     &            -1.d0,1.d0,1.d0,
     &             1.d0,1.d0,1.d0/
      data null /0/
!
!     a 10-node tet is remeshed into 10 4-node tets at contact
!     interfaces; itet contains the linear tet elements to which
!     the integration points of the parent 10-node tet belong
!
      data itet /1,2,3,10/
!
      data iwedge /1,0,2,0,3,0,1,5,2,6,3,7,5,0,6,0,7,0/
!
      data xwedge /0.975615382715435242d0,0.243846172845647580d-1,
     &             0.d0,0.d0,
     &             0.975615382715435242d0,0.243846172845647580d-1,
     &             0.d0,0.d0,
     &             0.975615382715435242d0,0.243846172845647580d-1,
     &             0.d0,0.d0,
     &             0.d0,.5d0,.5d0,0.d0,
     &             0.d0,.5d0,.5d0,0.d0,
     &             0.d0,.5d0,.5d0,0.d0,
     &             0.243846172845647580d-1,0.975615382715435242d0,
     &             0.d0,0.d0,
     &             0.243846172845647580d-1,0.975615382715435242d0,
     &             0.d0,0.d0,
     &             0.243846172845647580d-1,0.975615382715435242d0,
     &             0.d0,0.d0/
!
      data nonei10 /5,1,2,6,2,3,7,3,1,8,1,4,9,2,4,10,3,4/
!
      data nonei15 /7,1,2,8,2,3,9,3,1,10,4,5,11,5,6,12,6,4,
     &  13,1,4,14,2,5,15,3,6/
!
      data nonei20 /9,1,2,10,2,3,11,3,4,12,4,1,
     &  13,5,6,14,6,7,15,7,8,16,8,5,
     &  17,1,5,18,2,6,19,3,7,20,4,8/
!
      data a2 /1.1455d0,-0.1455d0,1.1455d0,-0.1455d0,1.1455d0,-0.1455d0,
     &        -0.1455d0,1.1455d0,-0.1455d0,1.1455d0,-0.1455d0,1.1455d0/

!     Precision increased on these 8/2021 Pete Gustafson (after a course
!     excercise demonstrating extrapolation). Current precision is
!     ridiculous, but comes for free.
      data a4 /
     & +1.9270509831248423537886083d+0, -3.0901699437494745126286944d-1,
     & -3.0901699437494745126286944d-1, -3.0901699437494745126286944d-1,
     & -3.0901699437494745126286944d-1, +1.9270509831248423537886083d+0,
     & -3.0901699437494745126286944d-1, -3.0901699437494745126286944d-1,
     & -3.0901699437494745126286944d-1, -3.0901699437494745126286944d-1,
     & +1.9270509831248423537886083d+0, -3.0901699437494745126286944d-1,
     & -3.0901699437494745126286944d-1, -3.0901699437494745126286944d-1,
     & -3.0901699437494745126286944d-1, +1.9270509831248423537886083d+0/
!
!     extrapolation from a 6 integration point scheme in a wedge to
!     the vertex nodes
!
      data a6 / 2.04904d0, 0.00000d0, 0.00000d0,-0.54904d0, 0.00000d0,
     &          0.00000d0,
     &         -0.34151d0, 1.70753d0,-0.34151d0, 0.09151d0,-0.45753d0,
     &          0.09151d0,
     &         -0.34151d0,-0.34151d0, 1.70753d0, 0.09151d0, 0.09151d0,
     &         -0.45753d0,
     &         -0.54904d0, 0.00000d0, 0.00000d0, 2.04904d0, 0.00000d0,
     &          0.00000d0,
     &          0.09151d0,-0.45753d0, 0.09151d0,-0.34151d0, 1.70753d0,
     &         -0.34151d0,
     &          0.09151d0, 0.09151d0,-0.45753d0,-0.34151d0,-0.34151d0,
     &          1.70753d0/

      data a9 / 1.63138d0,-0.32628d0,-0.32628d0,-0.52027d0, 0.10405d0,
     &          0.10405d0,
     &         -0.32628d0, 1.63138d0,-0.32628d0, 0.10405d0,-0.52027d0,
     &          0.10405d0,
     &         -0.32628d0,-0.32628d0, 1.63138d0, 0.10405d0, 0.10405d0,
     &         -0.52027d0,
     &          0.55556d0,-0.11111d0,-0.11111d0, 0.55556d0,-0.11111d0,
     &         -0.11111d0,
     &         -0.11111d0, 0.55556d0,-0.11111d0,-0.11111d0,0.55556d0,
     &         -0.11111d0,
     &         -0.11111d0,-0.11111d0, 0.55556d0,-0.11111d0,-0.11111d0,
     &          0.55556d0,
     &         -0.52027d0, 0.10405d0, 0.10405d0, 1.63138d0,-0.32628d0,
     &         -0.32628d0,
     &          0.10405d0,-0.52027d0, 0.10405d0,-0.32628d0, 1.63138d0,
     &         -0.32628d0,
     &          0.10405d0, 0.10405d0,-0.52027d0,-0.32628d0,-0.32628d0,
     &          1.63138d0/
!
!     extrapolation from a 2x2x2=8 integration point scheme in a hex to
!     the vertex nodes.  Precision increased on these 8/2021 Pete
!     Gustafson (after a course excercise demonstrating
!     extrapolation). Current precision is ridiculous, but comes for
!     free.
!     
      data a8 /
     & +2.5490381056766566736371260d+0, -6.8301270189221807704882394d-1,
     & -6.8301270189221940931645349d-1, +1.8301270189221954809433157d-1,
     & -6.8301270189221896522724364d-1, +1.8301270189221824358227764d-1,
     & +1.8301270189221996442796581d-1, -4.9038105676658283460511711d-2,
     & -6.8301270189221874318263872d-1, +2.5490381056766580059047556d+0,
     & +1.8301270189221963136105842d-1, -6.8301270189221918727184857d-1,
     & +1.8301270189221860440476064d-1, -6.8301270189221807704882394d-1,
     & -4.9038105676659414500218048d-2, +1.8301270189221935380530226d-1,
     & +1.8301270189222007545026827d-1, -6.8301270189221818807112641d-1,
     & -6.8301270189221907624954611d-1, +2.5490381056766580059047556d+0,
     & -4.9038105676658678977464234d-2, +1.8301270189221757744846286d-1,
     & +1.8301270189221979789451211d-1, -6.8301270189221829909342887d-1,
     & -6.8301270189221874318263872d-1, +1.8301270189221782724864340d-1,
     & +2.5490381056766575618155457d+0, -6.8301270189222018647257073d-1,
     & +1.8301270189222024198372196d-1, -4.9038105676655389941753782d-2,
     & -6.8301270189222040851717566d-1, +1.8301270189221932604972665d-1,
     & -6.8301270189221874318263872d-1, +1.8301270189221952033875596d-1,
     & +1.8301270189221940931645349d-1, -4.9038105676658602649631291d-2,
     & +2.5490381056766566736371260d+0, -6.8301270189221907624954611d-1,
     & -6.8301270189221918727184857d-1, +1.8301270189221968687220965d-1,
     & +1.8301270189221968687220965d-1, -6.8301270189221963136105842d-1,
     & -4.9038105676657818554620150d-2, +1.8301270189221965911663403d-1,
     & -6.8301270189221818807112641d-1, +2.5490381056766553413694965d+0,
     & +1.8301270189222118567329289d-1, -6.8301270189221863216033626d-1,
     & -4.9038105676657922638028708d-2, +1.8301270189221990891681457d-1,
     & +1.8301270189221979789451211d-1, -6.8301270189222029749487319d-1,
     & +1.8301270189221993667239019d-1, -6.8301270189221741091500917d-1,
     & -6.8301270189222107465099043d-1, +2.5490381056766566736371260d+0,
     & +1.8301270189221985340566334d-1, -4.9038105676658318154981231d-2,
     & -6.8301270189221918727184857d-1, +1.8301270189222004769469265d-1,
     & -6.8301270189221852113803379d-1, +1.8301270189221771622634094d-1,
     & +2.5490381056766584499939654d+0, -6.8301270189221885420494118d-1/
!
!     extrapolation from a 14 integration point scheme in a hex to
!     the vertex nodes
!    
      data a14 /
     &  0.1396d+01,-0.3026d+00,0.1124d-01,-0.3026d+00,
     &  -0.3026d+00,0.1124d-01,0.4901d-01,0.1124d-01,
     &  -0.3026d+00,0.1396d+01,-0.3026d+00,0.1124d-01,
     &  0.1124d-01,-0.3026d+00,0.1124d-01,0.4901d-01,
     &  0.1124d-01,-0.3026d+00,0.1396d+01,-0.3026d+00,
     &  0.4901d-01,0.1124d-01,-0.3026d+00,0.1124d-01,
     &  -0.3026d+00,0.1124d-01,-0.3026d+00,0.1396d+01,
     &  0.1124d-01,0.4901d-01,0.1124d-01,-0.3026d+00,
     &  -0.3026d+00,0.1124d-01,0.4901d-01,0.1124d-01,
     &  0.1396d+01,-0.3026d+00,0.1124d-01,-0.3026d+00,
     &  0.1124d-01,-0.3026d+00,0.1124d-01,0.4901d-01,
     &  -0.3026d+00,0.1396d+01,-0.3026d+00,0.1124d-01,
     &  0.4901d-01,0.1124d-01,-0.3026d+00,0.1124d-01,
     &  0.1124d-01,-0.3026d+00,0.1396d+01,-0.3026d+00,
     &  0.1124d-01,0.4901d-01,0.1124d-01,-0.3026d+00,
     &  -0.3026d+00,0.1124d-01,-0.3026d+00,0.1396d+01,
     &  0.2069d+00,0.2069d+00,-0.6408d-01,-0.6408d-01,
     &  0.2069d+00,0.2069d+00,-0.6408d-01,-0.6408d-01,
     &  -0.6408d-01,0.2069d+00,0.2069d+00,-0.6408d-01,
     &  -0.6408d-01,0.2069d+00,0.2069d+00,-0.6408d-01,
     &  -0.6408d-01,-0.6408d-01,0.2069d+00,0.2069d+00,
     &  -0.6408d-01,-0.6408d-01,0.2069d+00,0.2069d+00,
     &  0.2069d+00,-0.6408d-01,-0.6408d-01,0.2069d+00,
     &  0.2069d+00,-0.6408d-01,-0.6408d-01,0.2069d+00,
     &  0.2069d+00,0.2069d+00,0.2069d+00,0.2069d+00,
     &  -0.6408d-01,-0.6408d-01,-0.6408d-01,-0.6408d-01,
     &  -0.6408d-01,-0.6408d-01,-0.6408d-01,-0.6408d-01,
     &  0.2069d+00,0.2069d+00,0.2069d+00,0.2069d+00/
!
!     extrapolation from a 3x3x3=27 integration point scheme in a hex to
!     the all nodes in a 20-node element. Precision increased on these
!     8/2021 Pete Gustafson (after a course excercise demonstrating
!     extrapolation). Current precision is ridiculous, but comes for
!     free.
!    
      data a27 /
     & +2.3749905130142061615572402d+0, -1.2558804006385479445917497d-1,
     & -1.6144899697318323972261567d-1, -1.2558804006385501650377989d-1,
     & -1.2558804006385515528165797d-1, -1.6144899697318335074491813d-1,
     & +1.1575022772654103286882332d-1, -1.6144899697318332298934251d-1,
     & +3.2627685256707739114290234d-1, +1.1111111111111149352126404d-1,
     & +1.1111111111111166005471773d-1, +3.2627685256707633643102895d-1,
     & +1.1111111111111099392090296d-1, -1.0405463034485473716728166d-1,
     & -1.0405463034485518125649151d-1, +1.1111111111111171556586896d-1,
     & +3.2627685256707716909829742d-1, +1.1111111111111129923223473d-1,
     & -1.0405463034485522288985493d-1, +1.1111111111111163229914212d-1,
     & -3.1246265455939625788062131d-1, -3.1246265455939359334536221d-1,
     & +3.1481481481481216055939854d-1, +3.1481481481481499162811133d-1,
     & +3.1481481481481182749249115d-1, +3.1481481481481465856120394d-1,
     & -1.6901882692208583525150800d-1, -1.6901882692208175518189250d-1,
     & +1.2843861132567893079681198d+0, -2.7072129701152342073910972d-1,
     & -1.9444444444444389241688498d-1, -2.7072129701152392033947081d-1,
     & -1.9444444444444367037228005d-1, +1.5961018590041298192971908d-1,
     & -6.6083354790133445183508698d-3, +1.5961018590041253784050923d-1,
     & -2.7072129701152364278371465d-1, -2.7072129701152358727256342d-1,
     & +1.5961018590041348153008016d-1, +1.5961018590041123332845530d-1,
     & -1.2558804006385776430576584d-1, +2.3749905130142034970219811d+0,
     & -1.2558804006385507201493112d-1, -1.6144899697318287890013266d-1,
     & -1.6144899697318521036848438d-1, -1.2558804006385462792572127d-1,
     & -1.6144899697318235154419597d-1, +1.1575022772654162961369906d-1,
     & +3.2627685256707922301089297d-1, +3.2627685256707933403319544d-1,
     & +1.1111111111111089677638830d-1, +1.1111111111111129923223473d-1,
     & +1.1111111111111106330984200d-1, +1.1111111111111049432054187d-1,
     & -1.0405463034485712414678460d-1, -1.0405463034485641637960640d-1,
     & +1.1111111111111222904401785d-1, +3.2627685256707822381017081d-1,
     & +1.1111111111111078575408584d-1, -1.0405463034485666617978694d-1,
     & -3.1246265455939692401443608d-1, +3.1481481481481471407235517d-1,
     & +3.1481481481481521367271625d-1, -3.1246265455939792321515824d-1,
     & +3.1481481481481587980653103d-1, -1.6901882692208511360654200d-1,
     & -1.6901882692208533565114692d-1, +3.1481481481481415896084286d-1,
     & -2.7072129701152436442868066d-1, -1.9444444444444536346239261d-1,
     & -2.7072129701152353176141219d-1, +1.2843861132567899741019346d+0,
     & +1.5961018590041256559608485d-1, -6.6083354790130886466381632d-3,
     & +1.5961018590041356479680701d-1, -1.9444444444444441977282167d-1,
     & -2.7072129701152392033947081d-1, +1.5961018590041231579590431d-1,
     & +1.5961018590041278764068977d-1, -2.7072129701152264358299249d-1,
     & -4.8823919872290821864169175d-1, -4.8823919872290794108593559d-1,
     & -4.8823919872291077215464838d-1, -4.8823919872290899579780898d-1,
     & +2.2897993946364816886251958d-1, +2.2897993946364941786342229d-1,
     & +2.2897993946364988970820775d-1, +2.2897993946365155504274469d-1,
     & +5.5555555555554851643318415d-2, +5.5555555555555712066162499d-2,
     & +5.5555555555555725943950307d-2, +5.5555555555556031255282079d-2,
     & +5.5555555555555920232979616d-2, +5.5555555555555365121467304d-2,
     & +5.5555555555554796132167183d-2, +5.5555555555555392877042920d-2,
     & -2.2222222222222168253047414d-1, -2.2222222222222254295331823d-1,
     & -2.2222222222222151599702045d-1, -2.2222222222222257070889384d-1,
     & +3.1481481481481549122847241d-1, -3.1246265455939775668170455d-1,
     & -3.1246265455939814525976317d-1, +3.1481481481481582429537980d-1,
     & -1.6901882692208500258423953d-1, +3.1481481481481621287343842d-1,
     & +3.1481481481481532469501872d-1, -1.6901882692208539116229815d-1,
     & -2.7072129701152164438227032d-1, +1.2843861132567930827264036d+0,
     & -2.7072129701152281011644618d-1, -1.9444444444444328179422143d-1,
     & +1.5961018590041139986190899d-1, -1.9444444444444586306275369d-1,
     & +1.5961018590041073372809421d-1, -6.6083354790144668844398268d-3,
     & +1.5961018590041303744087031d-1, -2.7072129701152297664989987d-1,
     & -2.7072129701152392033947081d-1, +1.5961018590041164966208953d-1,
     & -1.2558804006385637652698506d-1, -1.6144899697318712550320186d-1,
     & -1.2558804006384907681059815d-1, +2.3749905130142003883975121d+0,
     & -1.6144899697317796616324870d-1, +1.1575022772654076919085497d-1,
     & -1.6144899697318212949959104d-1, -1.2558804006385926310684908d-1,
     & +1.1111111111111218741065443d-1, +1.1111111111111010574248326d-1,
     & +3.2627685256707761318750727d-1, +3.2627685256707888994398559d-1,
     & -1.0405463034485737394696514d-1, -1.0405463034485638862403079d-1,
     & +1.1111111111111186822153485d-1, +1.1111111111111141025453719d-1,
     & +1.1111111111111179883259581d-1, -1.0405463034485576412357943d-1,
     & +1.1111111111110900939724644d-1, +3.2627685256707994465585898d-1,
     & +3.1481481481481549122847241d-1, +3.1481481481481282669321331d-1,
     & -3.1246265455939442601263067d-1, -3.1246265455939720157019224d-1,
     & -1.6901882692208336500527821d-1, -1.6901882692208519687326884d-1,
     & +3.1481481481481515816156502d-1, +3.1481481481481332629357439d-1,
     & -1.9444444444444225483792366d-1, -2.7072129701152342073910972d-1,
     & +1.2843861132567906402357494d+0, -2.7072129701152181091572402d-1,
     & -6.6083354790147739304950747d-3, +1.5961018590041103903942599d-1,
     & -1.9444444444444558550699753d-1, +1.5961018590041214926245061d-1,
     & +1.5961018590041251008493361d-1, +1.5961018590041275988511416d-1,
     & -2.7072129701152436442868066d-1, -2.7072129701152253256069002d-1,
     & -1.6144899697318501607945507d-1, -1.2558804006385732021655599d-1,
     & +2.3749905130142030529327712d+0, -1.2558804006385482221475058d-1,
     & +1.1575022772654303127026765d-1, -1.6144899697318307318916197d-1,
     & -1.2558804006385507201493112d-1, -1.6144899697318496056830384d-1,
     & +1.1111111111111199312162512d-1, +3.2627685256707950056664913d-1,
     & +3.2627685256707839034362451d-1, +1.1111111111111152127683965d-1,
     & -1.0405463034485801232520430d-1, +1.1111111111111041105381503d-1,
     & +1.1111111111111079963187365d-1, -1.0405463034485795681405307d-1,
     & -1.0405463034485722129129925d-1, +1.1111111111111175719923239d-1,
     & +3.2627685256707750216520481d-1, +1.1111111111111160454356650d-1,
     & -3.1246265455939781219285578d-1, +3.1481481481481216055939854d-1,
     & -1.6901882692208303193837082d-1, +3.1481481481481571327307734d-1,
     & -3.1246265455939448152378191d-1, +3.1481481481481587980653103d-1,
     & -1.6901882692208552994017623d-1, +3.1481481481481204953709607d-1,
     & -2.7072129701152292113874864d-1, +1.5961018590041298192971908d-1,
     & +1.5961018590041237130705554d-1, -2.7072129701152497505134420d-1,
     & -2.7072129701152436442868066d-1, +1.5961018590041345377450455d-1,
     & +1.5961018590041300968529470d-1, -2.7072129701152336522795849d-1,
     & +1.2843861132567895300127248d+0, -1.9444444444444416997264113d-1,
     & -6.6083354790131745154502241d-3, -1.9444444444444400343918744d-1,
     & -4.8823919872290866273090160d-1, -4.8823919872291138277731193d-1,
     & +2.2897993946365219342098385d-1, +2.2897993946365047257529568d-1,
     & -4.8823919872290605370679373d-1, -4.8823919872290855170859913d-1,
     & +2.2897993946364939010784667d-1, +2.2897993946364658679470949d-1,
     & +5.5555555555556107583115022d-2, -2.2222222222222276499792315d-1,
     & +5.5555555555554921032257454d-2, -2.2222222222222173804162537d-1,
     & +5.5555555555554997360090397d-2, -2.2222222222222245968659138d-1,
     & +5.5555555555556412894446794d-2, -2.2222222222222173804162537d-1,
     & +5.5555555555554907154469646d-2, +5.5555555555556489222279737d-2,
     & +5.5555555555554768376591568d-2, +5.5555555555555864721828385d-2,
     & +3.1481481481481582429537980d-1, -3.1246265455939853383782179d-1,
     & +3.1481481481481804474142905d-1, -1.6901882692208644587417155d-1,
     & +3.1481481481481710105185812d-1, -3.1246265455939759014825086d-1,
     & +3.1481481481481565776192610d-1, -1.6901882692208705649683509d-1,
     & -2.7072129701152131131536294d-1, -2.7072129701152486402904174d-1,
     & +1.5961018590041101128385037d-1, +1.5961018590041312070759716d-1,
     & -2.7072129701152231051608510d-1, -2.7072129701152375380601711d-1,
     & +1.5961018590041206599572376d-1, +1.5961018590041239906263115d-1,
     & -1.9444444444444369812785567d-1, +1.2843861132567919725033789d+0,
     & -1.9444444444444680675232462d-1, -6.6083354790126783845360947d-3,
     & -4.8823919872290966193162376d-1, +2.2897993946365174933177400d-1,
     & +2.2897993946364897377421244d-1, -4.8823919872290882926435529d-1,
     & -4.8823919872291038357658977d-1, +2.2897993946364955664130036d-1,
     & +2.2897993946364897377421244d-1, -4.8823919872290783006363313d-1,
     & -2.2222222222222218213083522d-1, +5.5555555555556114522008926d-2,
     & -2.2222222222222243193101576d-1, +5.5555555555555927171873520d-2,
     & -2.2222222222222151599702045d-1, +5.5555555555555295732528265d-2,
     & -2.2222222222222232090871330d-1, +5.5555555555554927971151358d-2,
     & +5.5555555555555420632618535d-2, +5.5555555555554879398894030d-2,
     & +5.5555555555556045133069887d-2, +5.5555555555555143076862379d-2,
     & -2.9629629629629505860322070d-1, -2.9629629629629572473703547d-1,
     & -2.9629629629629583575933793d-1, -2.9629629629629633535969901d-1,
     & -2.9629629629629594678164040d-1, -2.9629629629629655740430394d-1,
     & -2.9629629629629583575933793d-1, -2.9629629629629583575933793d-1,
     & -1.1111111111111098004311515d-1, -1.1111111111111106330984200d-1,
     & -1.1111111111111071636514680d-1, -1.1111111111111100779869076d-1,
     & -1.1111111111111098004311515d-1, -1.1111111111111082738744926d-1,
     & -1.1111111111111118820993227d-1, -1.1111111111111088289860049d-1,
     & -1.1111111111111088289860049d-1, -1.1111111111111095228753953d-1,
     & -1.1111111111111109106541761d-1, -1.1111111111111099392090296d-1,
     & +2.2897993946365111095353484d-1, -4.8823919872291154931076562d-1,
     & -4.8823919872290760801902820d-1, +2.2897993946365025053069076d-1,
     & +2.2897993946365105544238361d-1, -4.8823919872290849619744790d-1,
     & -4.8823919872290844068629667d-1, +2.2897993946364875172960751d-1,
     & -2.2222222222222173804162537d-1, +5.5555555555555559410496613d-2,
     & -2.2222222222222171028604976d-1, +5.5555555555555351243679496d-2,
     & -2.2222222222222245968659138d-1, +5.5555555555555767577313730d-2,
     & -2.2222222222222171028604976d-1, +5.5555555555555767577313730d-2,
     & +5.5555555555555295732528265d-2, +5.5555555555555705127268595d-2,
     & +5.5555555555555004298984301d-2, +5.5555555555555892477404001d-2,
     & +3.1481481481481554673962364d-1, -1.6901882692208303193837082d-1,
     & +3.1481481481481121686982760d-1, -3.1246265455939586930256269d-1,
     & +3.1481481481481082829176898d-1, -1.6901882692208441971715160d-1,
     & +3.1481481481481587980653103d-1, -3.1246265455939370436766467d-1,
     & +1.5961018590041253784050923d-1, +1.5961018590041117781730406d-1,
     & -2.7072129701152325420565603d-1, -2.7072129701152192193802648d-1,
     & +1.5961018590041328724105085d-1, +1.5961018590041095577269914d-1,
     & -2.7072129701152414238407573d-1, -2.7072129701152169989342156d-1,
     & -1.9444444444444267117155789d-1, -6.6083354790150705682094667d-3,
     & -1.9444444444444575204045123d-1, +1.2843861132567913063695642d+0,
     & +2.2897993946365069461990061d-1, +2.2897993946365294282152547d-1,
     & -4.8823919872291138277731193d-1, -4.8823919872290899579780898d-1,
     & +2.2897993946364636475010457d-1, +2.2897993946364950113014913d-1,
     & -4.8823919872290888477550652d-1, -4.8823919872290616472909619d-1,
     & +5.5555555555555143076862379d-2, -2.2222222222222237641986453d-1,
     & +5.5555555555556142277584541d-2, -2.2222222222222215437525961d-1,
     & +5.5555555555556274116568716d-2, -2.2222222222222207110853276d-1,
     & +5.5555555555554844704424511d-2, -2.2222222222222157150817168d-1,
     & +5.5555555555556010438600367d-2, +5.5555555555555087565711148d-2,
     & +5.5555555555556246360993100d-2, +5.5555555555554782254379376d-2,
     & -1.6901882692208533565114692d-1, +3.1481481481481687900725319d-1,
     & -3.1246265455939903343818287d-1, +3.1481481481481426998314532d-1,
     & -1.6901882692208636260744470d-1, +3.1481481481481493611696010d-1,
     & -3.1246265455939770117055332d-1, +3.1481481481481687900725319d-1,
     & +1.5961018590041040066118683d-1, -2.7072129701152281011644618d-1,
     & -2.7072129701152225500493387d-1, +1.5961018590041073372809421d-1,
     & +1.5961018590041234355147992d-1, -2.7072129701152303216105111d-1,
     & -2.7072129701152258807184126d-1, +1.5961018590041131659518214d-1,
     & -6.6083354790149621479922182d-3, -1.9444444444444450303954852d-1,
     & +1.2843861132567944149940331d+0, -1.9444444444444569652929999d-1,
     & -1.2558804006385707041637545d-1, -1.6144899697318029763160041d-1,
     & +1.1575022772653729974390302d-1, -1.6144899697318318421146444d-1,
     & +2.3749905130141977238622530d+0, -1.2558804006385462792572127d-1,
     & -1.6144899697318174092153242d-1, -1.2558804006385054785610578d-1,
     & +1.1111111111111142413232500d-1, -1.0405463034485587514588190d-1,
     & -1.0405463034485570861242820d-1, +1.1111111111111218741065443d-1,
     & +3.2627685256707839034362451d-1, +1.1111111111111081350966145d-1,
     & +1.1111111111110963389769779d-1, +3.2627685256707772420980973d-1,
     & +3.2627685256707900096628805d-1, +1.1111111111111046656496626d-1,
     & -1.0405463034485554207897451d-1, +1.1111111111111003635354422d-1,
     & +3.1481481481481532469501872d-1, +3.1481481481481626838458965d-1,
     & -1.6901882692208602954053731d-1, -1.6901882692208566871805431d-1,
     & -3.1246265455939892241588041d-1, -3.1246265455939670196983116d-1,
     & +3.1481481481481549122847241d-1, +3.1481481481481587980653103d-1,
     & -1.9444444444444364261670444d-1, +1.5961018590041220477360184d-1,
     & -6.6083354790139551410144136d-3, +1.5961018590041317621874839d-1,
     & +1.2843861132567917504587740d+0, -2.7072129701152458647328558d-1,
     & -1.9444444444444597408505615d-1, -2.7072129701152358727256342d-1,
     & -2.7072129701152147784881663d-1, -2.7072129701152325420565603d-1,
     & +1.5961018590041162190651391d-1, +1.5961018590041162190651391d-1,
     & -1.6144899697318335074491813d-1, -1.2558804006385107521204247d-1,
     & -1.6144899697318709774762624d-1, +1.1575022772654164349148687d-1,
     & -1.2558804006385970719605893d-1, +2.3749905130142017206651417d+0,
     & -1.2558804006385543283741413d-1, -1.6144899697317885434166840d-1,
     & +1.1111111111111038329823941d-1, +1.1111111111111066085399557d-1,
     & -1.0405463034485656903527229d-1, -1.0405463034485608331269901d-1,
     & +3.2627685256708022221161514d-1, +3.2627685256707772420980973d-1,
     & +1.1111111111110931470857821d-1, +1.1111111111111240945525935d-1,
     & +1.1111111111111300620013509d-1, +3.2627685256707733563175111d-1,
     & +1.1111111111111181271038362d-1, -1.0405463034485783191396280d-1,
     & +3.1481481481481593531768226d-1, -1.6901882692208522462884446d-1,
     & -1.6901882692208569647362992d-1, +3.1481481481481443651659902d-1,
     & -3.1246265455939636890292377d-1, +3.1481481481481526918386749d-1,
     & +3.1481481481481449202775025d-1, -3.1246265455939570276910899d-1,
     & +1.5961018590041384235256317d-1, -6.6083354790135110518045636d-3,
     & +1.5961018590041292641856785d-1, -1.9444444444444311526076774d-1,
     & -2.7072129701152347625026096d-1, -1.9444444444444591857390492d-1,
     & -2.7072129701152508607364666d-1, +1.2843861132567906402357494d+0,
     & -2.7072129701152203296032894d-1, +1.5961018590041201048457253d-1,
     & +1.5961018590041189946227007d-1, -2.7072129701152380931716834d-1,
     & +2.2897993946365061135317376d-1, +2.2897993946364780804003658d-1,
     & +2.2897993946365219342098385d-1, +2.2897993946364972317475406d-1,
     & -4.8823919872290655330715481d-1, -4.8823919872290932886471637d-1,
     & -4.8823919872290927335356514d-1, -4.8823919872291082766579962d-1,
     & +5.5555555555555968805236944d-2, +5.5555555555555864721828385d-2,
     & +5.5555555555555524716027094d-2, +5.5555555555555170832437994d-2,
     & +5.5555555555554539393092739d-2, +5.5555555555555899416297905d-2,
     & +5.5555555555555996560812559d-2, +5.5555555555555434510406343d-2,
     & -2.2222222222222198784180591d-1, -2.2222222222222154375259606d-1,
     & -2.2222222222222295928695246d-1, -2.2222222222222151599702045d-1,
     & -1.6901882692208602954053731d-1, +3.1481481481481576878422857d-1,
     & +3.1481481481481371487163301d-1, -1.6901882692208530789557130d-1,
     & +3.1481481481481382589393547d-1, -3.1246265455939703503673854d-1,
     & -3.1246265455939703503673854d-1, +3.1481481481481582429537980d-1,
     & +1.5961018590041045617233806d-1, -1.9444444444444489161760714d-1,
     & +1.5961018590041189946227007d-1, -6.6083354790152527141744443d-3,
     & -2.7072129701152247704953879d-1, +1.2843861132567935268156134d+0,
     & -2.7072129701152242153838756d-1, -1.9444444444444400343918744d-1,
     & +1.5961018590041031739445998d-1, -2.7072129701152364278371465d-1,
     & -2.7072129701152214398263141d-1, +1.5961018590041220477360184d-1,
     & -1.6144899697318362830067429d-1, +1.1575022772653784097762752d-1,
     & -1.6144899697318049192062972d-1, -1.2558804006385601570450206d-1,
     & -1.2558804006385279605773064d-1, -1.6144899697318265685552774d-1,
     & -1.2558804006385446139226758d-1, +2.3749905130141986120406727d+0,
     & -1.0405463034485584739030628d-1, -1.0405463034485686046881625d-1,
     & +1.1111111111111091065417611d-1, +1.1111111111111157678799088d-1,
     & +1.1111111111111068860957118d-1, +1.1111111111111046656496626d-1,
     & +3.2627685256707894545513682d-1, +3.2627685256707839034362451d-1,
     & +1.1111111111111113269878103d-1, -1.0405463034485616657942586d-1,
     & +1.1111111111110917593070013d-1, +3.2627685256707922301089297d-1,
     & -1.6901882692208505809539076d-1, -1.6901882692208772263064986d-1,
     & +3.1481481481481715656300935d-1, +3.1481481481481510265041379d-1,
     & +3.1481481481481765616337043d-1, +3.1481481481481515816156502d-1,
     & -3.1246265455939731259249470d-1, -3.1246265455939992161660257d-1,
     & -6.6083354790145171914206301d-3, +1.5961018590041184395111884d-1,
     & -1.9444444444444558550699753d-1, +1.5961018590041017861658190d-1,
     & -1.9444444444444464181742660d-1, -2.7072129701152175540457279d-1,
     & +1.2843861132567935268156134d+0, -2.7072129701152303216105111d-1,
     & +1.5961018590041028963888436d-1, +1.5961018590041234355147992d-1,
     & -2.7072129701152281011644618d-1, -2.7072129701152203296032894d-1,
     & +1.1575022772654330882602380d-1, -1.6144899697318310094473759d-1,
     & -1.2558804006385540508183851d-1, -1.6144899697318235154419597d-1,
     & -1.6144899697318287890013266d-1, -1.2558804006385546059298974d-1,
     & +2.3749905130141999443083023d+0, -1.2558804006385557161529221d-1,
     & -1.0405463034485845641441415d-1, +1.1111111111111122984329569d-1,
     & +1.1111111111111109106541761d-1, -1.0405463034485783191396280d-1,
     & +1.1111111111111139637674938d-1, +3.2627685256708005567816144d-1,
     & +3.2627685256708055527852252d-1, +1.1111111111111132698781034d-1,
     & -1.0405463034485880335910934d-1, +1.1111111111111135474338596d-1,
     & +3.2627685256708066630082499d-1, +1.1111111111111106330984200d-1/
!
      data iflag /1/
!
      do ij=naneigh,nbneigh
         i=ialnneigh(ij)
         inum(i)=0
      enddo
!
      do ij=naneigh,nbneigh
         i=ialnneigh(ij)
         do j=1,nfield
            yn(j,i)=0.d0
         enddo
      enddo
!
      do ij=neaneigh,nebneigh
!      
         i=ialeneigh(ij)    
!
         if(ipkon(i).lt.0) cycle
!
         indexe=ipkon(i)
         lakonl=lakon(i)
!
         if(lakonl(7:8).eq.'LC') then
            nlayer=0
            do j=1,mi(3)
               if(ielmat(j,i).gt.0) then
                  nlayer=nlayer+1
               else
                  exit
               endif
            enddo
!
            if(lakonl(4:4).eq.'2') then
               nopeexp=28
            elseif(lakonl(4:5).eq.'15') then
               nopeexp=21
            endif
         endif
!
         if(lakonl(4:4).eq.'2') then
            nope=20
         elseif(lakonl(4:4).eq.'8') then
            nope=8
         elseif(lakonl(4:5).eq.'10') then
            nope=10
         elseif(lakonl(4:4).eq.'4') then
            nope=4
         elseif(lakonl(4:5).eq.'15') then
            nope=15
         elseif(lakonl(4:4).eq.'6') then
            nope=6
         elseif((lakonl(1:1).eq.'E').and.
     &          ((lakonl(7:7).eq.'A').or.
     &           (lakonl(7:7).eq.'2'))) then
!
            inum(kon(indexe+1))=inum(kon(indexe+1))+1
            inum(kon(indexe+2))=inum(kon(indexe+2))+1
            cycle
         elseif(lakonl(1:7).eq.'ESPRNGF') then
            read(lakonl(8:8),'(i1)') nope
            nope=nope+1
            inum(kon(indexe+nope))=-1
            cycle
         elseif(lakonl(1:1).eq.'U') then
            call extrapolate_u(yi,yn,ipkon,inum,kon,lakon,nfield,nk,
     &           ne,mi,ndim,orab,ielorien,co,iorienloc,cflag,
     &           vold,iforce,ielmat,thicke,ielprop,prop,i)
            return
         else
            cycle
         endif
!
!     storage in local coordinates
!
!     calculation of the integration point coordinates for
!     output in the local system
!
         if((iorienloc.ne.0).and.
     &        ((lakonl(7:8).eq.'LC').or.(ielorien(1,i).ne.0))) then
!
            if(lakonl(7:8).ne.'LC') then
               iorien=max(0,ielorien(1,i))
!david -start
            elseif(lakonl(4:5).eq.'20') then
!     
!     composite materials
!     
               mint2d=4
               nopes=8
!     
!     determining the layer thickness and global thickness
!     at the shell integration points
!     
!     xlayer: actual layer thickness
!     tlayer: total thickness of all layers
!     dlayer: total thickness of all layers up to the actual one
!
               indexe=ipkon(i)
               do kk=1,mint2d
                  xi=gauss3d2(1,kk)
                  et=gauss3d2(2,kk)
                  call shape8q(xi,et,xl2,xsj2,xs2,shp2,iflag)
                  tlayer(kk)=0.d0
                  do k=1,nlayer
                     thickness=0.d0
                     do j=1,nopes
                        thickness=thickness+thicke(k,indexe+j)*shp2(4,j)
                     enddo
                     tlayer(kk)=tlayer(kk)+thickness
                     xlayer(k,kk)=thickness
                  enddo
               enddo
!     
               ilayer=0
               do k=1,mint2d
                  dlayer(k)=0.d0
               enddo
!
!     S6-composite shell
!
            elseif(lakonl(4:5).eq.'15') then
!     
!     composite materials
!     
               mint2d=3
               nopes=6
!     
!     determining the layer thickness and global thickness
!     at the shell integration points
!     
!     xlayer: actual layer thickness
!     tlayer: total thickness of all layers
!     dlayer: total thickness of all layers up to the actual one
!    
               indexe=ipkon(i)
               do kk=1,mint2d
                  xi=gauss3d10(1,kk)
                  et=gauss3d10(2,kk)
                  call shape6tri(xi,et,xl2,xsj2,xs2,shp2,iflag)
                  tlayer(kk)=0.d0
                  do k=1,nlayer
                     thickness=0.d0
                     do j=1,nopes
                        thickness=thickness+thicke(k,indexe+j)*shp2(4,j)
                     enddo
                     tlayer(kk)=tlayer(kk)+thickness
                     xlayer(k,kk)=thickness
                  enddo
               enddo
!     
               ilayer=0
               do k=1,mint2d
                  dlayer(k)=0.d0
               enddo
            endif
!     
            if((lakon(i)(4:5).eq.'8R').or.(lakon(i)(1:1).eq.'F')) then
               mint3d=1
            elseif((lakon(i)(4:7).eq.'20RB').and.
     &         (lakon(i)(8:8).ne.'R').and.
     &         (lakon(i)(8:8).ne.'C')) then
               call beamintscheme(lakon(i),mint3d,ielprop(i),prop,
     &              null,xi,et,ze,weight)
            elseif((lakon(i)(4:4).eq.'8').or.
     &             (lakon(i)(4:6).eq.'20R')) then
               if(lakonl(7:8).eq.'LC') then
                  mint3d=8*nlayer
               else
                  mint3d=8
               endif
            elseif(lakon(i)(4:4).eq.'2') then
               mint3d=27
            elseif((lakon(i)(4:5).eq.'10')) then
               mint3d=4
            elseif(lakon(i)(4:4).eq.'4') then
               mint3d=1
            elseif(lakon(i)(4:5).eq.'15') then
               if(lakonl(7:8).eq.'LC') then
                  mint3d=6*nlayer
               else
                  mint3d=9
               endif
            elseif(lakon(i)(4:4).eq.'6') then
               mint3d=2
            endif
!
            do j=1,nope
               konl=kon(indexe+j)
               do k=1,3
                  xl(k,j)=co(k,konl)
               enddo
            enddo
!
            do j=1,mint3d
               if((lakon(i)(4:5).eq.'8R').or.
     &            (lakon(i)(1:4).eq.'F3D8')) then
                  xi=gauss3d1(1,j)
                  et=gauss3d1(2,j)
                  ze=gauss3d1(3,j)
                  weight=weight3d1(j)
               elseif((lakon(i)(4:7).eq.'20RB').and.
     &                 (lakon(i)(8:8).ne.'R').and.
     &                 (lakon(i)(8:8).ne.'C')) then
                  call beamintscheme(lakon(i),mint3d,ielprop(i),prop,
     &                 j,xi,et,ze,weight)
               elseif((lakon(i)(4:4).eq.'8').or.
     &                (lakon(i)(4:6).eq.'20R'))
     &                 then
                  if(lakonl(7:8).ne.'LC') then
                     xi=gauss3d2(1,j)
                     et=gauss3d2(2,j)
                     ze=gauss3d2(3,j)
                     weight=weight3d2(j)
                  else
!
!                    kl: number of the integration point within the layer
!
                     kl=mod(j,8)
                     if(kl.eq.0) kl=8
!     
                     xi=gauss3d2(1,kl)
                     et=gauss3d2(2,kl)
                     ze=gauss3d2(3,kl)
                     weight=weight3d2(kl)
!    
!                    ki: position of the integration point (1...4)
! 
                     ki=mod(j,4)
                     if(ki.eq.0) ki=4
!     
                     if(kl.eq.1) then
                        ilayer=ilayer+1
                        if(ilayer.gt.1) then
                           do k=1,4
                              dlayer(k)=dlayer(k)+xlayer(ilayer-1,k)
                           enddo
                        endif
                     endif
                     ze=2.d0*(dlayer(ki)+(ze+1.d0)/2.d0*
     &                    xlayer(ilayer,ki))/tlayer(ki)-1.d0
                     weight=weight*xlayer(ilayer,ki)/tlayer(ki)
!     
!                    material and orientation
!     
                     iorien=max(0,ielorien(ilayer,i))
                  endif
               elseif(lakon(i)(4:4).eq.'2') then
                  xi=gauss3d3(1,j)
                  et=gauss3d3(2,j)
                  ze=gauss3d3(3,j)
                  weight=weight3d3(j)
               elseif(lakon(i)(4:5).eq.'10') then
                  xi=gauss3d5(1,j)
                  et=gauss3d5(2,j)
                  ze=gauss3d5(3,j)
                  weight=weight3d5(j)
               elseif(lakon(i)(4:4).eq.'4') then
                  xi=gauss3d4(1,j)
                  et=gauss3d4(2,j)
                  ze=gauss3d4(3,j)
                  weight=weight3d4(j)
               elseif(lakon(i)(4:5).eq.'15') then
                  if(lakonl(7:8).ne.'LC') then
                    xi=gauss3d8(1,j)
                    et=gauss3d8(2,j)
                    ze=gauss3d8(3,j)
                    weight=weight3d8(j)
                  else
!
!                    kl: number of the integration point within the layer
!
                     kl=mod(j,6)
                     if(kl.eq.0) kl=6
!     
                     xi=gauss3d10(1,kl)
                     et=gauss3d10(2,kl)
                     ze=gauss3d10(3,kl)
                     weight=weight3d10(kl)
!    
!                    ki: position of the integration point (1...3)
! 
                     ki=mod(j,3)
                     if(ki.eq.0) ki=3
!     
                     if(kl.eq.1) then
                        ilayer=ilayer+1
                        if(ilayer.gt.1) then
                           do k=1,3
                              dlayer(k)=dlayer(k)+xlayer(ilayer-1,k)
                           enddo
                        endif
                     endif
                     ze=2.d0*(dlayer(ki)+(ze+1.d0)/2.d0*
     &                    xlayer(ilayer,ki))/tlayer(ki)-1.d0
                     weight=weight*xlayer(ilayer,ki)/tlayer(ki)
!     
!                    material and orientation
!     
                     iorien=max(0,ielorien(ilayer,i))
                  endif
               elseif(lakon(i)(1:4).eq.'C3D6') then
                  xi=gauss3d7(1,j)
                  et=gauss3d7(2,j)
                  ze=gauss3d7(3,j)
                  weight=weight3d7(j)
               elseif(lakon(i)(1:4).eq.'F3D6') then
                  xi=gauss3d14(1,j)
                  et=gauss3d14(2,j)
                  ze=gauss3d14(3,j)
                  weight=weight3d14(j)
               endif
!
               if(nope.eq.20) then
                  call shape20h(xi,et,ze,xl,xsj,shp,iflag)
               elseif(nope.eq.8) then
                  call shape8h(xi,et,ze,xl,xsj,shp,iflag)
               elseif(nope.eq.10) then
                  call shape10tet(xi,et,ze,xl,xsj,shp,iflag)
               elseif(nope.eq.4) then
                  call shape4tet(xi,et,ze,xl,xsj,shp,iflag)
               elseif(nope.eq.15) then
                  call shape15w(xi,et,ze,xl,xsj,shp,iflag)
               else
                  call shape6w(xi,et,ze,xl,xsj,shp,iflag)
               endif
!
!              layer without orientation in a composite
!
               if(iorien.eq.0) then
                  if(nfield.eq.3) then
                     do k=1,3
                        yiloc(k,j)=yi(k,j,i)
                     enddo
                  elseif(nfield.eq.6) then
                     do k=1,6
                        yiloc(k,j)=yi(k,j,i)
                     enddo
                  endif
                  cycle
               endif
!
!              coordinates of the integration point
!
               do k=1,3
                  coords(k,j)=0.d0
                  do l=1,nope
                     coords(k,j)=coords(k,j)+xl(k,l)*shp(4,l)
                  enddo
               enddo
!
!              transforming the vector or tensor field
!
               if(nfield.eq.3) then
                  call transformatrix(orab(1,iorien),coords(1,j),a)
                  yiloc(1,j)=yi(1,j,i)*a(1,1)+yi(2,j,i)*a(2,1)+
     &                     yi(3,j,i)*a(3,1)
                  yiloc(2,j)=yi(1,j,i)*a(1,2)+yi(2,j,i)*a(2,2)+
     &                     yi(3,j,i)*a(3,2)
                  yiloc(3,j)=yi(1,j,i)*a(1,3)+yi(2,j,i)*a(2,3)+
     &                     yi(3,j,i)*a(3,3)
               elseif(nfield.eq.6) then
                  call transformatrix(orab(1,iorien),coords(1,j),a)
                  b(1,1)=yi(1,j,i)
                  b(2,2)=yi(2,j,i)
                  b(3,3)=yi(3,j,i)
                  b(1,2)=yi(4,j,i)
                  b(1,3)=yi(5,j,i)
                  b(2,3)=yi(6,j,i)
                  b(2,1)=b(1,2)
                  b(3,1)=b(1,3)
                  b(3,2)=b(2,3)
                  do k=1,3
                     do l=1,3
                        c(k,l)=0.d0
                        do m=1,3
                           c(k,l)=c(k,l)+b(k,m)*a(m,l)
                        enddo
                     enddo
                  enddo
                  do k=1,3
                     do l=k,3
                        b(k,l)=0.d0
                        do m=1,3
                           b(k,l)=b(k,l)+a(m,k)*c(m,l)
                        enddo
                     enddo
                  enddo
                  yiloc(1,j)=b(1,1)
                  yiloc(2,j)=b(2,2)
                  yiloc(3,j)=b(3,3)
                  yiloc(4,j)=b(1,2)
                  yiloc(5,j)=b(1,3)
                  yiloc(6,j)=b(2,3)
               endif
            enddo
!
            if(lakonl(1:1).eq.'F') then
               do j=1,8
                  do k=1,nfield
                     field(k,j)=yiloc(k,1)
                  enddo
               enddo
            elseif((lakonl(4:7).eq.'20RB').and.
     &         (lakonl(8:8).ne.'R').and.
     &         (lakonl(8:8).ne.'C')) then
               call beamextscheme(yi(1,1,i),ndim,nfield,lakonl,
     &              ielprop(i),prop,field,mi)
c     Bernhardi start
            elseif((lakonl(4:6).eq.'20R').or.
     &         (lakonl(4:5).eq.'8 ').or.(lakonl(4:5).eq.'8I')) then
c     Bernhardi end
               if(lakonl(7:8).ne.'LC') then
                  do j=1,8
                     do k=1,nfield
                        field(k,j)=0.d0
                        do l=1,8
                           field(k,j)=field(k,j)+a8(j,l)*yiloc(k,l)
                        enddo
                     enddo
                  enddo
               else
                  do m=1,nlayer
                     jj=20*(m-1)
                     ll=8*(m-1)
                     do j=1,8
                        do k=1,nfield
                           field(k,jj+j)=0.d0
                           do l=1,8
                              field(k,jj+j)=
     &                           field(k,jj+j)+a8(j,l)*yiloc(k,ll+l)
                           enddo
                        enddo
                     enddo
                  enddo
               endif
            elseif(lakonl(4:4).eq.'8') then
               do j=1,8
                  do k=1,nfield
                     field(k,j)=yiloc(k,1)
                  enddo
               enddo
            elseif(lakonl(4:5).eq.'10') then
               do j=1,4
                  do k=1,nfield
                     field(k,j)=0.d0
                     do l=1,4
                        field(k,j)=field(k,j)+a4(j,l)*yiloc(k,l)
                     enddo
                  enddo
               enddo
            elseif(lakonl(4:4).eq.'2') then
               do j=1,20
                  do k=1,nfield
                     field(k,j)=0.d0
                     do l=1,27
                        field(k,j)=field(k,j)+a27(j,l)*yiloc(k,l)
                     enddo
                  enddo
               enddo
            elseif(lakonl(4:4).eq.'4') then
               do j=1,4
                  do k=1,nfield
                     field(k,j)=yiloc(k,1)
                  enddo
               enddo
            elseif(lakonl(4:4).eq.'1') then
               if(lakonl(7:8).ne.'LC') then
                  do j=1,6
                     do k=1,nfield
                        field(k,j)=0.d0
                        do l=1,9
                           field(k,j)=field(k,j)+a9(j,l)*yiloc(k,l)
                        enddo
                     enddo
                  enddo
               else
                  do m=1,nlayer
                     jj=15*(m-1)
                     ll=6*(m-1)
                     do j=1,6
                        do k=1,nfield
                           field(k,jj+j)=0.d0
                           do l=1,6
                              field(k,jj+j)=
     &                           field(k,jj+j)+a6(j,l)*yiloc(k,ll+l)
                           enddo
                        enddo
                     enddo
                  enddo
               endif
            else
               do j=1,6
                  do k=1,nfield
                     field(k,j)=0.d0
                     do l=1,2
                        field(k,j)=field(k,j)+a2(j,l)*yiloc(k,l)
                     enddo
                  enddo
               enddo
            endif
         else
!
!        storage in global coordinates
!
!        determining the field values in the vertex nodes
!        for C3D20R and C3D8: trilinear extrapolation (= use of the
!                             C3D8 linear interpolation functions)
!        for C3D8R: constant field value in each element
!        for C3D10: use of the C3D4 linear interpolation functions
!        for C3D4: constant field value in each element
!        for C3D15: use of the C3D6 linear interpolation functions
!        for C3D6: use of a linear interpolation function
!
            if(lakonl(1:1).eq.'F') then
               do j=1,8
                  do k=1,nfield
                     field(k,j)=yi(k,1,i)
                  enddo
               enddo
            elseif((lakonl(4:7).eq.'20RB').and.
     &         (lakonl(8:8).ne.'R').and.
     &         (lakonl(8:8).ne.'C')) then
               call beamextscheme(yi(1,1,i),ndim,nfield,lakonl,
     &              ielprop(i),prop,field,mi)
!               
c     Bernhardi start
            elseif((lakonl(4:6).eq.'20R').or.
     &         (lakonl(4:5).eq.'8 ').or.(lakonl(4:5).eq.'8I')) then
c     Bernhardi end
               if(lakonl(7:8).ne.'LC') then
                  do j=1,8
                     do k=1,nfield
                        field(k,j)=0.d0
                        do l=1,8
                           field(k,j)=field(k,j)+a8(j,l)*yi(k,l,i)
                        enddo
                     enddo
                  enddo
               else
                  do m=1,nlayer
                     jj=20*(m-1)
                     ll=8*(m-1)
                     do j=1,8
                        do k=1,nfield
                           field(k,jj+j)=0.d0
                           do l=1,8
                              field(k,jj+j)=
     &                           field(k,jj+j)+a8(j,l)*yi(k,ll+l,i)
                           enddo
                        enddo
                     enddo
                  enddo
               endif
            elseif(lakonl(4:4).eq.'8') then
               do j=1,8
                  do k=1,nfield
                     field(k,j)=yi(k,1,i)
                  enddo
               enddo
            elseif(lakonl(4:5).eq.'10') then
               do j=1,4
                  do k=1,nfield
                     field(k,j)=0.d0
                     do l=1,4
                        field(k,j)=field(k,j)+a4(j,l)*yi(k,l,i)
                     enddo
                  enddo
               enddo
            elseif(lakonl(4:4).eq.'2') then
               do j=1,20
                  do k=1,nfield
                     field(k,j)=0.d0
                     do l=1,27
                        field(k,j)=field(k,j)+a27(j,l)*yi(k,l,i)
                     enddo
                  enddo
               enddo
            elseif(lakonl(4:4).eq.'4') then
               do j=1,4
                  do k=1,nfield
                     field(k,j)=yi(k,1,i)
                  enddo
               enddo
            elseif(lakonl(4:4).eq.'1') then
               if(lakonl(7:8).ne.'LC') then
                  do j=1,6
                     do k=1,nfield
                        field(k,j)=0.d0
                        do l=1,9
                           field(k,j)=field(k,j)+a9(j,l)*yi(k,l,i)
                        enddo
                     enddo
                  enddo
               else
                  do m=1,nlayer
                     jj=15*(m-1)
                     ll=6*(m-1)
                     do j=1,6
                        do k=1,nfield
                           field(k,jj+j)=0.d0
                           do l=1,6
                              field(k,jj+j)=
     &                           field(k,jj+j)+a6(j,l)*yi(k,ll+l,i)
                           enddo
                        enddo
                     enddo
                  enddo
               endif
            else
               do j=1,6
                  do k=1,nfield
                     field(k,j)=0.d0
                     do l=1,2
                        field(k,j)=field(k,j)+a2(j,l)*yi(k,l,i)
                     enddo
                  enddo
               enddo
            endif
         endif
!
!        determining the field values in the midside nodes
!
         if(lakonl(4:6).eq.'20R') then
            if(lakonl(7:8).ne.'LC') then
               do j=9,20
                  do k=1,nfield
                     field(k,j)=(field(k,nonei20(2,j-8))+
     &                    field(k,nonei20(3,j-8)))/2.d0
                  enddo
               enddo
            else
               do m=1,nlayer
                  jj=20*(m-1)
                  do j=9,20
                     do k=1,nfield
                        field(k,jj+j)=(field(k,jj+nonei20(2,j-8))
     &                     +field(k,jj+nonei20(3,j-8)))/2.d0
                     enddo
                  enddo
               enddo
            endif
         elseif(lakonl(4:5).eq.'10') then
            do j=5,10
               do k=1,nfield
                  field(k,j)=(field(k,nonei10(2,j-4))+
     &                 field(k,nonei10(3,j-4)))/2.d0
               enddo
            enddo
         elseif(lakonl(4:5).eq.'15') then
            if(lakonl(7:8).ne.'LC') then
               do j=7,15
                  do k=1,nfield
                     field(k,j)=(field(k,nonei15(2,j-6))+
     &                    field(k,nonei15(3,j-6)))/2.d0
                  enddo
               enddo
            else
               do m=1,nlayer
                  jj=15*(m-1)
                  do j=7,15
                     do k=1,nfield
                        field(k,jj+j)=(field(k,jj+nonei15(2,j-6))
     &                     +field(k,jj+nonei15(3,j-6)))/2.d0
                     enddo
                  enddo
               enddo
            endif
         endif
!
!        transferring the field values into yn
!
         if(lakonl(7:8).ne.'LC') then
            do j=1,nope
               do k=1,nfield
                  yn(k,kon(indexe+j))=yn(k,kon(indexe+j))+
     &                 field(k,j)
               enddo
               inum(kon(indexe+j))=inum(kon(indexe+j))+1
            enddo
         else
            do j=1,nope*nlayer
               do k=1,nfield
                  yn(k,kon(indexe+nopeexp+j))=
     &            yn(k,kon(indexe+nopeexp+j))+field(k,j)
               enddo
               inum(kon(indexe+nopeexp+j))=
     &              inum(kon(indexe+nopeexp+j))+1
            enddo
         endif
!
c     Bernhardi start
c        incompatible modes elements
         if(lakonl(1:5).eq.'C3D8I') then
            do j=1,3
               do k=1,nfield
                  yn(k,kon(indexe+nope+j))=0.0d0
               enddo
            enddo
         endif
c     Bernhardi end
!
      enddo
!
!     taking the mean of nodal contributions coming from different
!     elements having the node in common
!
      do ij=naneigh,nbneigh
         i=ialnneigh(ij)
         if(inum(i).gt.0) then
            do j=1,nfield
               yn(j,i)=yn(j,i)/inum(i)
            enddo
         endif
      enddo
!
!     for 1d and 2d elements only:
!     finding the solution in the original nodes
!
      if((cflag.ne.' ').and.(cflag.ne.'E')) then
         call map3dto1d2d(yn,ipkon,inum,kon,lakon,nfield,nk,ne,cflag,
     &         co,vold,iforce,mi)
      endif
!
      return
      end
